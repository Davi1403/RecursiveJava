1-)

A função mistério retorna a multiplicação de 'a' por 'b', quando b>=1; senão retorna erro;

Exemplo:

misterio(1, 3)

1 + 1 + 1 = 1 * 3 = 3

---------------------------------------------------------------------------------------------------------------------------

2-)

1.  public int soma(int n){
2.      if (n == 0) return 0;
3.      else return n + soma(n); 
4.  }

Exemplo n = 3

Resp : 3 + 3 + 3 + 3 + 3 + 3 + 3 ...

O erro está na quarta linha, está faltando um decremento de 1 em n 'soma(n-1)', da forma que está escrita, a função ficara em um loop infinito de soma de n. 
É importante ressaltar que nesse exemplo considerei que n >= 0, para que a função funcione com n <= 0 é necessário alterar soma(n-1) por soma(n+1).

CORRIGIDO

1.  public int soma(int n){
2.      if (n == 0) return 0;
3.      else return n + soma(n-1); 
4.  }

Exemplo n = 3

Resp : 3 + 2 + 1 + 0 = 6


---------------------------------------------------------------------------------------------------------------------------

3-)

import java.util.Scanner;

public class Ex3 {
    public int potencia(int base, int expoente){
        if (expoente == 0) return 1;
        else {
            return base * potencia(base, expoente - 1);
        }
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        Ex3 p = new Ex3();

        System.out.print("BASE: ");
        int base = sc.nextInt();
        System.out.print("EXPOENTE: ");
        int expoente = sc.nextInt();

        System.out.printf("POTENCIA DE BASE %d E EXPOENTE %d = ",base,expoente);
        System.out.print(p.potencia(base,expoente));
    }
}

---------------------------------------------------------------------------------------------------------------------------


4-)

public class Ex4 {
    public int repiticao(int a, int b){

        int soma = a;

        for (int i = 0; i < b ; i++){
            soma ++;
        }
        return soma;
    }


    public int recursiva(int a, int b){
        if (b == 0) return a;
        else{
            return recursiva(++a, --b);   // Passa 1 de 'a' para 'b' (5,3) --> (6,2) --> (7,1) --> (8,0) --> return a
        }
    }

    public static void main(String[] args) {
        Ex4 r = new Ex4();

        System.out.println(r.repiticao(10,5));
        System.out.println(r.recursiva(10,5));
    }
}

---------------------------------------------------------------------------------------------------------------------------

5-)

1.  ff(7) = ff(3) + ff(4) --> ff(7) = (1 + 1) +  (1) --> RESPOSTA = 3

2.  ff(3) = ff(1) + ff(2) --> 1 + 1

3. ff(2) = ff(1)

4. ff(1) = 1

5. ff(4) = ff(2) = ff(1) = 1

---------------------------------------------------------------------------------------------------------------------------

6-)

fusc(7, 0)sasas
...fusc(3, 1)
......fusc(1, 2)
......fusc(2, 2)
.........fusc(1, 3)
...fusc(4, 1)
......fusc(2, 2)
.........fusc(1, 3)
3

---------------------------------------------------------------------------------------------------------------------------

7-)

 h(3, 3) = h(3, 2) + h(2, 3)

    h(3, 2) = h(3, 1) + h(2, 2)

        h(3, 1) = 3 + 1 = 4

        h(2, 2) = h(2,1) + h(1,2)

            h(2, 1) = 2 + 1 = 3

            h(1, 2) = 2 + 1 = 3

            h(2, 2) = 3 + 3 = 6

        h(3, 2) = 4 + 6 = 10

    h(2, 3) = h(2, 2) + h(1, 3)

        h(2, 2) = 6 

        h(1, 3) = 3 + 1 = 4

        h(2, 3) = 6 + 4 = 10

 h(3, 3) = 10 + 10 = 20
 h(2, 4) = h(2, 3) + h(1, 4)

    h(2, 3) = 10 

    h(1, 4) = 4 + 1 = 5

 h(2, 4) = 10 + 5 = 15

Resultado final:
h(3,4)=h(3,3)+h(2,4)=20+15=35

---------------------------------------------------------------------------------------------------------------------------

8-)

public class Ex8 {
    public int mdc(int x, int y){
        if (x == y) return x;
        if (y>x) return mdc(y,x);
        else {
            return mdc(x-y,y);
        }
    }

    public static void main(String[] args) {
        Ex8 mdc = new Ex8();

        System.out.println(mdc.mdc(10,15));
    }
}

9-)

public class Ex10 {
    public double somaImpares(int n){

        if (n == 1) return 1    ;
        else {
            return (2 * n - 1) + somaImpares(n - 1);
        }
    }

    public static void main(String[] args) {
        Ex10 aux = new Ex10();

        System.out.println(aux.somaImpares(5    ));
    }
}


